diff --git a/node_modules/react-native-keyevent-expo-config-plugin/build/withReactNativeKeyevent.js b/node_modules/react-native-keyevent-expo-config-plugin/build/withReactNativeKeyevent.js
index b373f1a..996b69d 100644
--- a/node_modules/react-native-keyevent-expo-config-plugin/build/withReactNativeKeyevent.js
+++ b/node_modules/react-native-keyevent-expo-config-plugin/build/withReactNativeKeyevent.js
@@ -1,30 +1,38 @@
 "use strict";
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
 Object.defineProperty(exports, "__esModule", { value: true });
-const config_plugins_1 = require("@expo/config-plugins");
-const generateCode_1 = require("@expo/config-plugins/build/utils/generateCode");
-const withIosAppDelegateImport = (config) => {
+var config_plugins_1 = require("@expo/config-plugins");
+var generateCode_1 = require("@expo/config-plugins/build/utils/generateCode");
+var withIosAppDelegateImport = function (config) {
     // @ts-ignore
-    const newConfig = (0, config_plugins_1.withAppDelegate)(config, (config) => {
-        const newSrc = ['#import <RNKeyEvent.h>'];
-        const newConfig = (0, generateCode_1.mergeContents)({
+    var newConfig = (0, config_plugins_1.withAppDelegate)(config, function (config) {
+        var newSrc = ['#import <RNKeyEvent.h>'];
+        var newConfig = (0, generateCode_1.mergeContents)({
             tag: 'react-native-keyevent-import',
             src: config.modResults.contents,
             newSrc: newSrc.join('\n'),
-            anchor: `#import "AppDelegate.h"`,
+            anchor: "#import \"AppDelegate.h\"",
             offset: 1,
             comment: '//',
         });
-        return {
-            ...config,
-            modResults: newConfig,
-        };
+        return __assign(__assign({}, config), { modResults: newConfig });
     });
     return newConfig;
 };
-const withIosAppDelegateBody = (config) => {
+var withIosAppDelegateBody = function (config) {
     // @ts-ignore
-    const newConfig = (0, config_plugins_1.withAppDelegate)(config, (config) => {
-        const newSrc = [
+    var newConfig = (0, config_plugins_1.withAppDelegate)(config, function (config) {
+        var newSrc = [
             'RNKeyEvent *keyEvent = nil;',
             ' ',
             '- (NSMutableArray<UIKeyCommand *> *)keyCommands {',
@@ -58,105 +66,92 @@ const withIosAppDelegateBody = (config) => {
             '  [keyEvent sendKeyEvent:selected];',
             '}',
         ];
-        const newConfig = (0, generateCode_1.mergeContents)({
+        var newConfig = (0, generateCode_1.mergeContents)({
             tag: 'react-native-keyevent-body',
             src: config.modResults.contents,
             newSrc: newSrc.join('\n'),
-            anchor: `@implementation AppDelegate`,
+            anchor: "@implementation AppDelegate", // /#import "AppDelegate\.h"/g,
             offset: 1,
             comment: '//',
         });
-        return {
-            ...config,
-            modResults: newConfig,
-        };
+        return __assign(__assign({}, config), { modResults: newConfig });
     });
     return newConfig;
 };
-const withAndroidMainActivityImport = (config) => {
+var withAndroidMainActivityImport = function (config) {
     // @ts-ignore
-    const newConfig = (0, config_plugins_1.withMainActivity)(config, (config) => {
-        const newSrc = [
-            'import android.view.KeyEvent;',
-            'import com.github.kevinejohn.keyevent.KeyEventModule;',
+    var newConfig = (0, config_plugins_1.withMainActivity)(config, function (config) {
+        var newSrc = [
+            'import android.view.KeyEvent',
+            'import com.github.kevinejohn.keyevent.KeyEventModule',
         ];
-        const newConfig = (0, generateCode_1.mergeContents)({
+        var newConfig = (0, generateCode_1.mergeContents)({
             tag: 'react-native-keyevent-import',
             src: config.modResults.contents,
             newSrc: newSrc.join('\n'),
-            anchor: `;`,
+            anchor: "import",
             offset: 1,
             comment: '//',
         });
-        return {
-            ...config,
-            modResults: newConfig,
-        };
+        return __assign(__assign({}, config), { modResults: newConfig });
     });
     return newConfig;
 };
-const withAndroidMainActivityBody = (config) => {
+var withAndroidMainActivityBody = function (config) {
     // @ts-ignore
-    const newConfig = (0, config_plugins_1.withMainActivity)(config, (config) => {
-        const newSrc = [
-            '@Override',
-            'public boolean onKeyDown(int keyCode, KeyEvent event) {',
-            '',
-            '  // // Uncomment this is key events should only trigger once when key is held down',
+    var newConfig = (0, config_plugins_1.withMainActivity)(config, function (config) {
+        var newSrc = [
+            'override fun onKeyDown(keyCode: Int, event: KeyEvent): Boolean {',
+            '   // // Uncomment this if key events should only trigger once when key is held down',
             '  // if (event.getRepeatCount() == 0) {',
-            '  //   KeyEventModule.getInstance().onKeyDownEvent(keyCode, event);',
+            '  //   KeyEventModule.getInstance().onKeyDownEvent(keyCode, event)',
             '  // }',
             '',
             '  // // This will trigger the key repeat if the key is held down',
             '  // // Comment this out if uncommenting the above',
-            '  KeyEventModule.getInstance().onKeyDownEvent(keyCode, event);',
+            '  KeyEventModule.getInstance().onKeyDownEvent(keyCode, event)',
             '',
             '  // // Uncomment this if you want the default keyboard behavior',
-            '  // return super.onKeyDown(keyCode, event);',
+            '  // return super.onKeyDown(keyCode, event)',
             '',
             '  // // The default keyboard behaviour wll be overridden',
             '  // // This is similar to what e.preventDefault() does in a browser',
             '  // // comment this if uncommenting the above',
-            '  super.onKeyDown(keyCode, event);',
-            '  return true;',
+            '  super.onKeyDown(keyCode, event)',
+            '  return true',
             '}',
             '',
-            '@Override',
-            'public boolean onKeyUp(int keyCode, KeyEvent event) {',
-            '  KeyEventModule.getInstance().onKeyUpEvent(keyCode, event);',
+            'override fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean {',
+            '  KeyEventModule.getInstance().onKeyUpEvent(keyCode, event)',
             '',
             '  // // Uncomment this if you want the default keyboard behavior',
-            '  // return super.onKeyUp(keyCode, event);',
+            '  // return super.onKeyUp(keyCode, event)',
             '',
             '  // // The default keyboard behaviour wll be overridden',
             '  // // This is similar to what e.preventDefault() does in a browser',
             '  // // comment this if uncommenting the above',
-            '  super.onKeyUp(keyCode, event);',
-            '  return true;',
+            '  super.onKeyUp(keyCode, event)',
+            '  return true',
             '}',
             '',
-            '@Override',
-            'public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {',
-            '    KeyEventModule.getInstance().onKeyMultipleEvent(keyCode, repeatCount, event);',
-            '    return super.onKeyMultiple(keyCode, repeatCount, event);',
+            'override fun onKeyMultiple(keyCode: Int, repeatCount: Int, event: KeyEvent): Boolean {',
+            '    KeyEventModule.getInstance().onKeyMultipleEvent(keyCode, repeatCount, event)',
+            '    return super.onKeyMultiple(keyCode, repeatCount, event)',
             '}',
         ];
-        const newConfig = (0, generateCode_1.mergeContents)({
+        var newConfig = (0, generateCode_1.mergeContents)({
             tag: 'react-native-keyevent-body',
             src: config.modResults.contents,
             newSrc: newSrc.join('\n'),
-            anchor: `public class MainActivity extends ReactActivity {`,
+            anchor: "class MainActivity",
             offset: 1,
             comment: '//',
         });
-        return {
-            ...config,
-            modResults: newConfig,
-        };
+        return __assign(__assign({}, config), { modResults: newConfig });
     });
     return newConfig;
 };
-const initPlugin = (config) => {
+var initPlugin = function (config) {
     config = withIosAppDelegateImport(config);
     config = withIosAppDelegateBody(config);
     config = withAndroidMainActivityImport(config);
